{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q1Z8xJMqGx3y"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb\n",
        "from imblearn.over_sampling import ADASYN\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.metrics import roc_auc_score, auc, roc_curve\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Conv1D, MaxPool1D, Flatten, Dropout,LSTM"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **ROC-Curve**"
      ],
      "metadata": {
        "id": "aH1npSSGM3rC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = pd.read_csv('/content/LSA_TR.csv')"
      ],
      "metadata": {
        "id": "XhZ3nsdcHJlA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "columns = df1.columns.tolist()\n",
        "# Filter the columns to remove data we do not want\n",
        "columns = [c for c in columns if c not in [\"Target\"]]\n",
        "# Store the variable we are predicting\n",
        "target = \"Target\"\n",
        "X = df1[columns]\n",
        "Y = df1[target]"
      ],
      "metadata": {
        "id": "DBpHEgrOIAQb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size = 0.3, random_state = 1)"
      ],
      "metadata": {
        "id": "_fS25NZDN8y6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample_size = xtrain.shape[0] # number of samples in train set\n",
        "time_steps  = xtrain.shape[1] # number of features in train set\n",
        "input_dimension = 1               # each feature is represented by 1 number\n",
        "train_data_reshaped = xtrain.values.reshape(sample_size,time_steps,input_dimension)\n",
        "n_timesteps = train_data_reshaped.shape[1]\n",
        "n_features  = train_data_reshaped.shape[2]"
      ],
      "metadata": {
        "id": "q3vYU3gnOSJX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "kf = KFold(n_splits=5, shuffle=True)"
      ],
      "metadata": {
        "id": "_GR_AEBBJF9p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ada = ADASYN()\n",
        "X, Y = ada.fit_resample(X, Y)\n",
        "X = X.to_numpy()\n",
        "X = X.reshape(X.shape[0], X.shape[1], 1)\n",
        "for train_index, val_index in kf.split(X):\n",
        "    X_train, X_val = X[train_index], X[val_index]\n",
        "    y_train, y_val = Y[train_index], Y[val_index]"
      ],
      "metadata": {
        "id": "HuBwaM3iIVmg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**MLP**"
      ],
      "metadata": {
        "id": "Q8HKsO2UJuIn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlp = MLPClassifier(hidden_layer_sizes=(8,7), learning_rate_init=0.1, random_state= 50)"
      ],
      "metadata": {
        "id": "ZE6HeIjbJwTi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ANN-CV**"
      ],
      "metadata": {
        "id": "EtKnWPi6Lh_o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ann_cv = Sequential()\n",
        "ann_cv.add(Dense(64, activation = 'relu', input_shape=(X_train.shape[1], 1)))\n",
        "ann_cv.add(Dense(128, activation = 'relu'))\n",
        "ann_cv.add(Dense(128, activation = 'relu'))\n",
        "ann_cv.add(MaxPool1D(pool_size=2))\n",
        "ann_cv.add(Flatten())\n",
        "ann_cv.add(Dense(64, activation='relu'))\n",
        "ann_cv.add(Dense(1, activation='sigmoid'))\n",
        "ann_cv.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "N46FFYoELkyQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ANN-TS**"
      ],
      "metadata": {
        "id": "KXnArtKgOGK5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ann_ts = Sequential()\n",
        "ann_ts.add(Dense(64, activation = 'relu', input_shape=(n_timesteps,n_features)))\n",
        "ann_ts.add(Dense(128, activation = 'relu'))\n",
        "ann_ts.add(Dense(128, activation = 'relu'))\n",
        "ann_ts.add(MaxPool1D(pool_size=2))\n",
        "ann_ts.add(Flatten())\n",
        "ann_ts.add(Dense(64, activation='relu'))\n",
        "ann_ts.add(Dense(1, activation='sigmoid'))\n",
        "ann_ts.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "xLtI-LwgOIjh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**CNN-CV**"
      ],
      "metadata": {
        "id": "6UlZGPxqMYTw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_cv = Sequential()\n",
        "cnn_cv.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)))\n",
        "cnn_cv.add(Conv1D(filters=128, kernel_size=3, activation='relu'))\n",
        "cnn_cv.add(Conv1D(filters=128, kernel_size=3, activation='relu'))\n",
        "cnn_cv.add(MaxPool1D(pool_size=2))\n",
        "cnn_cv.add(Flatten())\n",
        "cnn_cv.add(Dense(64, activation='relu'))\n",
        "cnn_cv.add(Dense(1, activation='sigmoid'))\n",
        "cnn_cv.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "yuBwgXu7Mc9n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**CNN-TS**"
      ],
      "metadata": {
        "id": "gIcB5ilVM61X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnn_ts = Sequential()\n",
        "cnn_ts.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(n_timesteps,n_features)))\n",
        "cnn_ts.add(Conv1D(filters=128, kernel_size=3, activation='relu'))\n",
        "cnn_ts.add(Conv1D(filters=128, kernel_size=3, activation='relu'))\n",
        "cnn_ts.add(MaxPool1D(pool_size=2))\n",
        "cnn_ts.add(Flatten())\n",
        "cnn_ts.add(Dense(64, activation='relu'))\n",
        "cnn_ts.add(Dense(1, activation='sigmoid'))\n",
        "cnn_ts.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "pipMlJvfOfQY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**CNN+LSTM-CV**"
      ],
      "metadata": {
        "id": "oWWcVDQrOqA_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cl_cv = Sequential()\n",
        "cl_cv.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)))\n",
        "cl_cv.add(Conv1D(filters=128, kernel_size=3, activation='relu'))\n",
        "cl_cv.add(MaxPool1D(pool_size=4))\n",
        "cl_cv.add(LSTM(256, activation='relu'))\n",
        "cl_cv.add(Flatten())\n",
        "cl_cv.add(Dense(64, activation='relu'))\n",
        "cl_cv.add(Dense(1, activation='sigmoid'))\n",
        "cl_cv.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "E1oECd89OtAC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**CNN+LSTM-TS**"
      ],
      "metadata": {
        "id": "AklNlLRTPEEX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cl_ts = Sequential()\n",
        "cl_ts.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(n_timesteps,n_features)))\n",
        "cl_ts.add(Conv1D(filters=128, kernel_size=3, activation='relu'))\n",
        "cl_ts.add(MaxPool1D(pool_size=4))\n",
        "cl_ts.add(LSTM(256, activation='relu'))\n",
        "cl_ts.add(Flatten())\n",
        "cl_ts.add(Dense(64, activation='relu'))\n",
        "cl_ts.add(Dense(1, activation='sigmoid'))\n",
        "cl_ts.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "SONao6pZPGtf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [8, 3.5]\n",
        "#plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "ax = plt.GridSpec(1, 2)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "plt.title('A', weight='bold',  fontsize=18, y = 0.95, x=-0.14)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "mlp.fit(xtrain, ytrain)\n",
        "ann_cv.fit(X_train, y_train, epochs = 75, batch_size= 64)\n",
        "cnn_cv.fit(X_train, y_train, epochs = 75, batch_size= 64)\n",
        "cl_cv.fit(X_train, y_train, epochs = 75, batch_size= 64)\n",
        "\n",
        "pred = mlp.predict_proba(xtest)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"MLP, AUC=\"+str(auc))\n",
        "\n",
        "pred = ann_cv.predict(X_val).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(y_val, pred)\n",
        "auc = round(metrics.roc_auc_score(y_val, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"ANN, AUC=\"+str(auc))\n",
        "\n",
        "pred = cnn_cv.predict(X_val).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(y_val, pred)\n",
        "auc = round(metrics.roc_auc_score(y_val, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00008B\", label=\"CNN, AUC=\"+str(auc))\n",
        "\n",
        "pred = cl_cv.predict(X_val).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(y_val, pred)\n",
        "auc = round(metrics.roc_auc_score(y_val, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"Deep3BPP, AUC=\"+str(auc))\n",
        "\n",
        "\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "plt.title('B', weight='bold',  fontsize=18, y = 0.95, x=-0.14)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "mlp.fit(xtrain, ytrain)\n",
        "ann_ts.fit(xtrain, ytrain, epochs = 75, batch_size= 64)\n",
        "cnn_ts.fit(xtrain, ytrain, epochs = 75, batch_size= 64)\n",
        "cl_ts.fit(xtrain, ytrain, epochs = 75, batch_size= 64)\n",
        "\n",
        "pred = mlp.predict_proba(xtest)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"MLP, AUC=\"+str(auc))\n",
        "\n",
        "pred = ann_ts.predict(xtest).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"ANN, AUC=\"+str(auc))\n",
        "\n",
        "pred = cnn_ts.predict(xtest).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00008B\", label=\"CNN, AUC=\"+str(auc))\n",
        "\n",
        "pred = cl_ts.predict(xtest).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"Deep3BPP, AUC=\"+str(auc))\n",
        "\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=7)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('/content/drive/MyDrive/Bioinformatics/BBB PP/Result/ROC Curve.png', dpi=800)\n",
        "plt.savefig('/content/drive/MyDrive/Bioinformatics/BBB PP/Result/ROC Curve.pdf', dpi=800)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_VJNiZ6fPgAv",
        "outputId": "d2c5e5b9-8a7f-40d0-a7f2-4458c6b07451"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/75\n",
            "66/66 [==============================] - 4s 34ms/step - loss: 0.5500 - accuracy: 0.7333\n",
            "Epoch 2/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 0.4037 - accuracy: 0.8455\n",
            "Epoch 3/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 0.3383 - accuracy: 0.8803\n",
            "Epoch 4/75\n",
            "66/66 [==============================] - 1s 21ms/step - loss: 0.2990 - accuracy: 0.8947\n",
            "Epoch 5/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 0.2546 - accuracy: 0.9117\n",
            "Epoch 6/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.1997 - accuracy: 0.9290\n",
            "Epoch 7/75\n",
            "66/66 [==============================] - 1s 18ms/step - loss: 0.1555 - accuracy: 0.9422\n",
            "Epoch 8/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.1272 - accuracy: 0.9571\n",
            "Epoch 9/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.1002 - accuracy: 0.9645\n",
            "Epoch 10/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0781 - accuracy: 0.9746\n",
            "Epoch 11/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 0.0544 - accuracy: 0.9844\n",
            "Epoch 12/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 0.0344 - accuracy: 0.9904\n",
            "Epoch 13/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 0.0306 - accuracy: 0.9926\n",
            "Epoch 14/75\n",
            "66/66 [==============================] - 2s 32ms/step - loss: 0.0227 - accuracy: 0.9954\n",
            "Epoch 15/75\n",
            "66/66 [==============================] - 2s 23ms/step - loss: 0.0228 - accuracy: 0.9945\n",
            "Epoch 16/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0115 - accuracy: 0.9986\n",
            "Epoch 17/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0065 - accuracy: 0.9998\n",
            "Epoch 18/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0054 - accuracy: 0.9998\n",
            "Epoch 19/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0031 - accuracy: 1.0000\n",
            "Epoch 20/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0024 - accuracy: 1.0000\n",
            "Epoch 21/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0020 - accuracy: 1.0000\n",
            "Epoch 22/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 0.0018 - accuracy: 1.0000\n",
            "Epoch 23/75\n",
            "66/66 [==============================] - 2s 30ms/step - loss: 0.0014 - accuracy: 1.0000\n",
            "Epoch 24/75\n",
            "66/66 [==============================] - 2s 32ms/step - loss: 0.0012 - accuracy: 1.0000\n",
            "Epoch 25/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 0.0011 - accuracy: 1.0000\n",
            "Epoch 26/75\n",
            "66/66 [==============================] - 2s 25ms/step - loss: 8.6189e-04 - accuracy: 1.0000\n",
            "Epoch 27/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 9.6885e-04 - accuracy: 1.0000\n",
            "Epoch 28/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 7.1083e-04 - accuracy: 1.0000\n",
            "Epoch 29/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 6.2345e-04 - accuracy: 1.0000\n",
            "Epoch 30/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 5.3750e-04 - accuracy: 1.0000\n",
            "Epoch 31/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 4.8768e-04 - accuracy: 1.0000\n",
            "Epoch 32/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 4.3126e-04 - accuracy: 1.0000\n",
            "Epoch 33/75\n",
            "66/66 [==============================] - 1s 18ms/step - loss: 3.9744e-04 - accuracy: 1.0000\n",
            "Epoch 34/75\n",
            "66/66 [==============================] - 2s 26ms/step - loss: 3.6386e-04 - accuracy: 1.0000\n",
            "Epoch 35/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 3.2436e-04 - accuracy: 1.0000\n",
            "Epoch 36/75\n",
            "66/66 [==============================] - 2s 32ms/step - loss: 2.9652e-04 - accuracy: 1.0000\n",
            "Epoch 37/75\n",
            "66/66 [==============================] - 2s 29ms/step - loss: 2.7830e-04 - accuracy: 1.0000\n",
            "Epoch 38/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 2.5477e-04 - accuracy: 1.0000\n",
            "Epoch 39/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 2.3350e-04 - accuracy: 1.0000\n",
            "Epoch 40/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 2.1634e-04 - accuracy: 1.0000\n",
            "Epoch 41/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 2.0181e-04 - accuracy: 1.0000\n",
            "Epoch 42/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 1.8698e-04 - accuracy: 1.0000\n",
            "Epoch 43/75\n",
            "66/66 [==============================] - 2s 27ms/step - loss: 1.7727e-04 - accuracy: 1.0000\n",
            "Epoch 44/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 1.6203e-04 - accuracy: 1.0000\n",
            "Epoch 45/75\n",
            "66/66 [==============================] - 2s 30ms/step - loss: 1.5159e-04 - accuracy: 1.0000\n",
            "Epoch 46/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 1.4103e-04 - accuracy: 1.0000\n",
            "Epoch 47/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 1.3153e-04 - accuracy: 1.0000\n",
            "Epoch 48/75\n",
            "66/66 [==============================] - 2s 26ms/step - loss: 1.2770e-04 - accuracy: 1.0000\n",
            "Epoch 49/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 1.1887e-04 - accuracy: 1.0000\n",
            "Epoch 50/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 1.0929e-04 - accuracy: 1.0000\n",
            "Epoch 51/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 1.0321e-04 - accuracy: 1.0000\n",
            "Epoch 52/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 9.5615e-05 - accuracy: 1.0000\n",
            "Epoch 53/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 9.0227e-05 - accuracy: 1.0000\n",
            "Epoch 54/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 8.5916e-05 - accuracy: 1.0000\n",
            "Epoch 55/75\n",
            "66/66 [==============================] - 2s 27ms/step - loss: 7.9563e-05 - accuracy: 1.0000\n",
            "Epoch 56/75\n",
            "66/66 [==============================] - 4s 55ms/step - loss: 7.4896e-05 - accuracy: 1.0000\n",
            "Epoch 57/75\n",
            "66/66 [==============================] - 2s 33ms/step - loss: 7.0925e-05 - accuracy: 1.0000\n",
            "Epoch 58/75\n",
            "66/66 [==============================] - 2s 28ms/step - loss: 6.7327e-05 - accuracy: 1.0000\n",
            "Epoch 59/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 6.2724e-05 - accuracy: 1.0000\n",
            "Epoch 60/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 5.9597e-05 - accuracy: 1.0000\n",
            "Epoch 61/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 5.7601e-05 - accuracy: 1.0000\n",
            "Epoch 62/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 5.3799e-05 - accuracy: 1.0000\n",
            "Epoch 63/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 5.1047e-05 - accuracy: 1.0000\n",
            "Epoch 64/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 4.7691e-05 - accuracy: 1.0000\n",
            "Epoch 65/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 4.7084e-05 - accuracy: 1.0000\n",
            "Epoch 66/75\n",
            "66/66 [==============================] - 2s 25ms/step - loss: 4.4479e-05 - accuracy: 1.0000\n",
            "Epoch 67/75\n",
            "66/66 [==============================] - 2s 32ms/step - loss: 4.0867e-05 - accuracy: 1.0000\n",
            "Epoch 68/75\n",
            "66/66 [==============================] - 2s 32ms/step - loss: 3.9178e-05 - accuracy: 1.0000\n",
            "Epoch 69/75\n",
            "66/66 [==============================] - 2s 32ms/step - loss: 3.8175e-05 - accuracy: 1.0000\n",
            "Epoch 70/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 3.5057e-05 - accuracy: 1.0000\n",
            "Epoch 71/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 3.3567e-05 - accuracy: 1.0000\n",
            "Epoch 72/75\n",
            "66/66 [==============================] - 1s 20ms/step - loss: 3.1744e-05 - accuracy: 1.0000\n",
            "Epoch 73/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 3.0897e-05 - accuracy: 1.0000\n",
            "Epoch 74/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 2.9220e-05 - accuracy: 1.0000\n",
            "Epoch 75/75\n",
            "66/66 [==============================] - 1s 19ms/step - loss: 2.6980e-05 - accuracy: 1.0000\n",
            "Epoch 1/75\n",
            "66/66 [==============================] - 3s 35ms/step - loss: 0.5554 - accuracy: 0.7381\n",
            "Epoch 2/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 0.3454 - accuracy: 0.8796\n",
            "Epoch 3/75\n",
            "66/66 [==============================] - 4s 54ms/step - loss: 0.2405 - accuracy: 0.9160\n",
            "Epoch 4/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 0.1444 - accuracy: 0.9484\n",
            "Epoch 5/75\n",
            "66/66 [==============================] - 2s 36ms/step - loss: 0.1013 - accuracy: 0.9688\n",
            "Epoch 6/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 0.0747 - accuracy: 0.9772\n",
            "Epoch 7/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 0.0494 - accuracy: 0.9849\n",
            "Epoch 8/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 0.0246 - accuracy: 0.9945\n",
            "Epoch 9/75\n",
            "66/66 [==============================] - 3s 51ms/step - loss: 0.0182 - accuracy: 0.9966\n",
            "Epoch 10/75\n",
            "66/66 [==============================] - 4s 65ms/step - loss: 0.0084 - accuracy: 0.9988\n",
            "Epoch 11/75\n",
            "66/66 [==============================] - 3s 44ms/step - loss: 0.0053 - accuracy: 0.9995\n",
            "Epoch 12/75\n",
            "66/66 [==============================] - 2s 34ms/step - loss: 0.0033 - accuracy: 0.9998\n",
            "Epoch 13/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 0.0034 - accuracy: 1.0000\n",
            "Epoch 14/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 0.0019 - accuracy: 1.0000\n",
            "Epoch 15/75\n",
            "66/66 [==============================] - 3s 51ms/step - loss: 0.0013 - accuracy: 1.0000\n",
            "Epoch 16/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 0.0011 - accuracy: 1.0000\n",
            "Epoch 17/75\n",
            "66/66 [==============================] - 3s 40ms/step - loss: 9.1796e-04 - accuracy: 1.0000\n",
            "Epoch 18/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 7.5534e-04 - accuracy: 1.0000\n",
            "Epoch 19/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 6.3620e-04 - accuracy: 1.0000\n",
            "Epoch 20/75\n",
            "66/66 [==============================] - 2s 34ms/step - loss: 5.8247e-04 - accuracy: 1.0000\n",
            "Epoch 21/75\n",
            "66/66 [==============================] - 3s 45ms/step - loss: 4.8608e-04 - accuracy: 1.0000\n",
            "Epoch 22/75\n",
            "66/66 [==============================] - 4s 60ms/step - loss: 4.2802e-04 - accuracy: 1.0000\n",
            "Epoch 23/75\n",
            "66/66 [==============================] - 3s 46ms/step - loss: 3.7532e-04 - accuracy: 1.0000\n",
            "Epoch 24/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 3.2853e-04 - accuracy: 1.0000\n",
            "Epoch 25/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 2.9045e-04 - accuracy: 1.0000\n",
            "Epoch 26/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 2.6876e-04 - accuracy: 1.0000\n",
            "Epoch 27/75\n",
            "66/66 [==============================] - 3s 39ms/step - loss: 2.4409e-04 - accuracy: 1.0000\n",
            "Epoch 28/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 2.1588e-04 - accuracy: 1.0000\n",
            "Epoch 29/75\n",
            "66/66 [==============================] - 3s 52ms/step - loss: 2.0274e-04 - accuracy: 1.0000\n",
            "Epoch 30/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.8949e-04 - accuracy: 1.0000\n",
            "Epoch 31/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.6293e-04 - accuracy: 1.0000\n",
            "Epoch 32/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.5065e-04 - accuracy: 1.0000\n",
            "Epoch 33/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.4187e-04 - accuracy: 1.0000\n",
            "Epoch 34/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 1.2995e-04 - accuracy: 1.0000\n",
            "Epoch 35/75\n",
            "66/66 [==============================] - 4s 56ms/step - loss: 1.1822e-04 - accuracy: 1.0000\n",
            "Epoch 36/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.0751e-04 - accuracy: 1.0000\n",
            "Epoch 37/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.0288e-04 - accuracy: 1.0000\n",
            "Epoch 38/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 9.5145e-05 - accuracy: 1.0000\n",
            "Epoch 39/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 8.7820e-05 - accuracy: 1.0000\n",
            "Epoch 40/75\n",
            "66/66 [==============================] - 4s 57ms/step - loss: 8.2048e-05 - accuracy: 1.0000\n",
            "Epoch 41/75\n",
            "66/66 [==============================] - 4s 60ms/step - loss: 7.5414e-05 - accuracy: 1.0000\n",
            "Epoch 42/75\n",
            "66/66 [==============================] - 2s 34ms/step - loss: 7.1209e-05 - accuracy: 1.0000\n",
            "Epoch 43/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 6.7508e-05 - accuracy: 1.0000\n",
            "Epoch 44/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 6.2886e-05 - accuracy: 1.0000\n",
            "Epoch 45/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 5.8564e-05 - accuracy: 1.0000\n",
            "Epoch 46/75\n",
            "66/66 [==============================] - 3s 53ms/step - loss: 5.5660e-05 - accuracy: 1.0000\n",
            "Epoch 47/75\n",
            "66/66 [==============================] - 4s 62ms/step - loss: 5.5056e-05 - accuracy: 1.0000\n",
            "Epoch 48/75\n",
            "66/66 [==============================] - 3s 38ms/step - loss: 4.9172e-05 - accuracy: 1.0000\n",
            "Epoch 49/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 4.6227e-05 - accuracy: 1.0000\n",
            "Epoch 50/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 4.3180e-05 - accuracy: 1.0000\n",
            "Epoch 51/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 4.1044e-05 - accuracy: 1.0000\n",
            "Epoch 52/75\n",
            "66/66 [==============================] - 3s 48ms/step - loss: 3.8686e-05 - accuracy: 1.0000\n",
            "Epoch 53/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 3.6391e-05 - accuracy: 1.0000\n",
            "Epoch 54/75\n",
            "66/66 [==============================] - 3s 43ms/step - loss: 3.4010e-05 - accuracy: 1.0000\n",
            "Epoch 55/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 3.2513e-05 - accuracy: 1.0000\n",
            "Epoch 56/75\n",
            "66/66 [==============================] - 2s 34ms/step - loss: 3.1974e-05 - accuracy: 1.0000\n",
            "Epoch 57/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 2.9178e-05 - accuracy: 1.0000\n",
            "Epoch 58/75\n",
            "66/66 [==============================] - 3s 42ms/step - loss: 2.7677e-05 - accuracy: 1.0000\n",
            "Epoch 59/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 2.6133e-05 - accuracy: 1.0000\n",
            "Epoch 60/75\n",
            "66/66 [==============================] - 3s 48ms/step - loss: 2.4777e-05 - accuracy: 1.0000\n",
            "Epoch 61/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 2.3509e-05 - accuracy: 1.0000\n",
            "Epoch 62/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 2.2429e-05 - accuracy: 1.0000\n",
            "Epoch 63/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 2.1187e-05 - accuracy: 1.0000\n",
            "Epoch 64/75\n",
            "66/66 [==============================] - 2s 37ms/step - loss: 2.0205e-05 - accuracy: 1.0000\n",
            "Epoch 65/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 1.9312e-05 - accuracy: 1.0000\n",
            "Epoch 66/75\n",
            "66/66 [==============================] - 4s 56ms/step - loss: 1.9804e-05 - accuracy: 1.0000\n",
            "Epoch 67/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.7438e-05 - accuracy: 1.0000\n",
            "Epoch 68/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.6364e-05 - accuracy: 1.0000\n",
            "Epoch 69/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.5764e-05 - accuracy: 1.0000\n",
            "Epoch 70/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.4904e-05 - accuracy: 1.0000\n",
            "Epoch 71/75\n",
            "66/66 [==============================] - 4s 56ms/step - loss: 1.4212e-05 - accuracy: 1.0000\n",
            "Epoch 72/75\n",
            "66/66 [==============================] - 4s 61ms/step - loss: 1.3412e-05 - accuracy: 1.0000\n",
            "Epoch 73/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.2910e-05 - accuracy: 1.0000\n",
            "Epoch 74/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.2307e-05 - accuracy: 1.0000\n",
            "Epoch 75/75\n",
            "66/66 [==============================] - 2s 35ms/step - loss: 1.1731e-05 - accuracy: 1.0000\n",
            "Epoch 1/75\n",
            "66/66 [==============================] - 7s 79ms/step - loss: 0.6407 - accuracy: 0.6342\n",
            "Epoch 2/75\n",
            "66/66 [==============================] - 6s 89ms/step - loss: 0.5837 - accuracy: 0.7302\n",
            "Epoch 3/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.4623 - accuracy: 0.8083\n",
            "Epoch 4/75\n",
            "66/66 [==============================] - 5s 78ms/step - loss: 0.3775 - accuracy: 0.8549\n",
            "Epoch 5/75\n",
            "66/66 [==============================] - 6s 90ms/step - loss: 0.3062 - accuracy: 0.8839\n",
            "Epoch 6/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.2381 - accuracy: 0.9089\n",
            "Epoch 7/75\n",
            "66/66 [==============================] - 5s 80ms/step - loss: 0.1997 - accuracy: 0.9261\n",
            "Epoch 8/75\n",
            "66/66 [==============================] - 6s 91ms/step - loss: 0.1573 - accuracy: 0.9475\n",
            "Epoch 9/75\n",
            "66/66 [==============================] - 5s 70ms/step - loss: 0.1239 - accuracy: 0.9520\n",
            "Epoch 10/75\n",
            "66/66 [==============================] - 5s 83ms/step - loss: 0.1077 - accuracy: 0.9628\n",
            "Epoch 11/75\n",
            "66/66 [==============================] - 6s 87ms/step - loss: 0.1145 - accuracy: 0.9573\n",
            "Epoch 12/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0945 - accuracy: 0.9647\n",
            "Epoch 13/75\n",
            "66/66 [==============================] - 6s 84ms/step - loss: 0.0759 - accuracy: 0.9719\n",
            "Epoch 14/75\n",
            "66/66 [==============================] - 6s 84ms/step - loss: 0.0563 - accuracy: 0.9808\n",
            "Epoch 15/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0610 - accuracy: 0.9787\n",
            "Epoch 16/75\n",
            "66/66 [==============================] - 6s 87ms/step - loss: 0.0503 - accuracy: 0.9827\n",
            "Epoch 17/75\n",
            "66/66 [==============================] - 6s 84ms/step - loss: 0.0491 - accuracy: 0.9822\n",
            "Epoch 18/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0394 - accuracy: 0.9873\n",
            "Epoch 19/75\n",
            "66/66 [==============================] - 6s 85ms/step - loss: 0.0290 - accuracy: 0.9899\n",
            "Epoch 20/75\n",
            "66/66 [==============================] - 5s 83ms/step - loss: 0.0396 - accuracy: 0.9858\n",
            "Epoch 21/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0348 - accuracy: 0.9849\n",
            "Epoch 22/75\n",
            "66/66 [==============================] - 6s 85ms/step - loss: 0.0340 - accuracy: 0.9887\n",
            "Epoch 23/75\n",
            "66/66 [==============================] - 6s 83ms/step - loss: 0.0477 - accuracy: 0.9830\n",
            "Epoch 24/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0344 - accuracy: 0.9882\n",
            "Epoch 25/75\n",
            "66/66 [==============================] - 6s 86ms/step - loss: 0.0175 - accuracy: 0.9935\n",
            "Epoch 26/75\n",
            "66/66 [==============================] - 6s 83ms/step - loss: 0.0226 - accuracy: 0.9930\n",
            "Epoch 27/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0210 - accuracy: 0.9909\n",
            "Epoch 28/75\n",
            "66/66 [==============================] - 6s 85ms/step - loss: 0.0174 - accuracy: 0.9945\n",
            "Epoch 29/75\n",
            "66/66 [==============================] - 6s 84ms/step - loss: 0.0145 - accuracy: 0.9950\n",
            "Epoch 30/75\n",
            "66/66 [==============================] - 5s 71ms/step - loss: 0.0087 - accuracy: 0.9971\n",
            "Epoch 31/75\n",
            "66/66 [==============================] - 6s 94ms/step - loss: 0.0153 - accuracy: 0.9957\n",
            "Epoch 32/75\n",
            "66/66 [==============================] - 5s 81ms/step - loss: 0.0178 - accuracy: 0.9938\n",
            "Epoch 33/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0192 - accuracy: 0.9938\n",
            "Epoch 34/75\n",
            "66/66 [==============================] - 6s 92ms/step - loss: 0.0671 - accuracy: 0.9760\n",
            "Epoch 35/75\n",
            "66/66 [==============================] - 5s 77ms/step - loss: 0.0187 - accuracy: 0.9957\n",
            "Epoch 36/75\n",
            "66/66 [==============================] - 5s 70ms/step - loss: 0.0024 - accuracy: 0.9993\n",
            "Epoch 37/75\n",
            "66/66 [==============================] - 6s 93ms/step - loss: 6.0800e-04 - accuracy: 1.0000\n",
            "Epoch 38/75\n",
            "66/66 [==============================] - 5s 76ms/step - loss: 2.2446e-04 - accuracy: 1.0000\n",
            "Epoch 39/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0033 - accuracy: 0.9990\n",
            "Epoch 40/75\n",
            "66/66 [==============================] - 6s 92ms/step - loss: 0.0976 - accuracy: 0.9715\n",
            "Epoch 41/75\n",
            "66/66 [==============================] - 5s 75ms/step - loss: 0.0103 - accuracy: 0.9962\n",
            "Epoch 42/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0055 - accuracy: 0.9983\n",
            "Epoch 43/75\n",
            "66/66 [==============================] - 6s 94ms/step - loss: 0.0016 - accuracy: 0.9995\n",
            "Epoch 44/75\n",
            "66/66 [==============================] - 5s 74ms/step - loss: 0.0028 - accuracy: 0.9990\n",
            "Epoch 45/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0794 - accuracy: 0.9748\n",
            "Epoch 46/75\n",
            "66/66 [==============================] - 6s 93ms/step - loss: 0.0809 - accuracy: 0.9753\n",
            "Epoch 47/75\n",
            "66/66 [==============================] - 5s 74ms/step - loss: 0.0082 - accuracy: 0.9981\n",
            "Epoch 48/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0183 - accuracy: 0.9945\n",
            "Epoch 49/75\n",
            "66/66 [==============================] - 6s 92ms/step - loss: 0.0072 - accuracy: 0.9971\n",
            "Epoch 50/75\n",
            "66/66 [==============================] - 5s 76ms/step - loss: 0.0205 - accuracy: 0.9942\n",
            "Epoch 51/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0045 - accuracy: 0.9981\n",
            "Epoch 52/75\n",
            "66/66 [==============================] - 6s 92ms/step - loss: 0.0042 - accuracy: 0.9988\n",
            "Epoch 53/75\n",
            "66/66 [==============================] - 5s 76ms/step - loss: 0.0049 - accuracy: 0.9983\n",
            "Epoch 54/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0070 - accuracy: 0.9983\n",
            "Epoch 55/75\n",
            "66/66 [==============================] - 6s 92ms/step - loss: 0.0104 - accuracy: 0.9962\n",
            "Epoch 56/75\n",
            "66/66 [==============================] - 5s 77ms/step - loss: 0.0034 - accuracy: 0.9990\n",
            "Epoch 57/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 0.0036 - accuracy: 0.9990\n",
            "Epoch 58/75\n",
            "66/66 [==============================] - 6s 92ms/step - loss: 2.9532e-04 - accuracy: 1.0000\n",
            "Epoch 59/75\n",
            "66/66 [==============================] - 5s 77ms/step - loss: 1.1194e-04 - accuracy: 1.0000\n",
            "Epoch 60/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 1.2135e-05 - accuracy: 1.0000\n",
            "Epoch 61/75\n",
            "66/66 [==============================] - 6s 93ms/step - loss: 2.9359e-06 - accuracy: 1.0000\n",
            "Epoch 62/75\n",
            "66/66 [==============================] - 5s 76ms/step - loss: 1.7667e-06 - accuracy: 1.0000\n",
            "Epoch 63/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 4.5215e-07 - accuracy: 1.0000\n",
            "Epoch 64/75\n",
            "66/66 [==============================] - 6s 90ms/step - loss: 3.1543e-07 - accuracy: 1.0000\n",
            "Epoch 65/75\n",
            "66/66 [==============================] - 5s 78ms/step - loss: 2.3299e-07 - accuracy: 1.0000\n",
            "Epoch 66/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 1.7241e-07 - accuracy: 1.0000\n",
            "Epoch 67/75\n",
            "66/66 [==============================] - 6s 91ms/step - loss: 1.3429e-07 - accuracy: 1.0000\n",
            "Epoch 68/75\n",
            "66/66 [==============================] - 5s 79ms/step - loss: 1.0963e-07 - accuracy: 1.0000\n",
            "Epoch 69/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 8.8224e-08 - accuracy: 1.0000\n",
            "Epoch 70/75\n",
            "66/66 [==============================] - 7s 113ms/step - loss: 7.4749e-08 - accuracy: 1.0000\n",
            "Epoch 71/75\n",
            "66/66 [==============================] - 6s 90ms/step - loss: 6.2800e-08 - accuracy: 1.0000\n",
            "Epoch 72/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 5.3634e-08 - accuracy: 1.0000\n",
            "Epoch 73/75\n",
            "66/66 [==============================] - 5s 80ms/step - loss: 4.6054e-08 - accuracy: 1.0000\n",
            "Epoch 74/75\n",
            "66/66 [==============================] - 6s 88ms/step - loss: 4.0195e-08 - accuracy: 1.0000\n",
            "Epoch 75/75\n",
            "66/66 [==============================] - 5s 69ms/step - loss: 3.4937e-08 - accuracy: 1.0000\n",
            "33/33 [==============================] - 0s 4ms/step\n",
            "33/33 [==============================] - 0s 6ms/step\n",
            "33/33 [==============================] - 1s 14ms/step\n",
            "Epoch 1/75\n",
            "36/36 [==============================] - 2s 20ms/step - loss: 0.5297 - accuracy: 0.7985\n",
            "Epoch 2/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.4835 - accuracy: 0.8127\n",
            "Epoch 3/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.4536 - accuracy: 0.8127\n",
            "Epoch 4/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.4120 - accuracy: 0.8127\n",
            "Epoch 5/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.3628 - accuracy: 0.8127\n",
            "Epoch 6/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.3319 - accuracy: 0.8127\n",
            "Epoch 7/75\n",
            "36/36 [==============================] - 1s 21ms/step - loss: 0.3066 - accuracy: 0.8623\n",
            "Epoch 8/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.2756 - accuracy: 0.8707\n",
            "Epoch 9/75\n",
            "36/36 [==============================] - 1s 29ms/step - loss: 0.2578 - accuracy: 0.8844\n",
            "Epoch 10/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.2753 - accuracy: 0.8782\n",
            "Epoch 11/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.2397 - accuracy: 0.9017\n",
            "Epoch 12/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.2280 - accuracy: 0.9026\n",
            "Epoch 13/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.2242 - accuracy: 0.9136\n",
            "Epoch 14/75\n",
            "36/36 [==============================] - 1s 24ms/step - loss: 0.2110 - accuracy: 0.9128\n",
            "Epoch 15/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1969 - accuracy: 0.9216\n",
            "Epoch 16/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1991 - accuracy: 0.9221\n",
            "Epoch 17/75\n",
            "36/36 [==============================] - 1s 21ms/step - loss: 0.1882 - accuracy: 0.9305\n",
            "Epoch 18/75\n",
            "36/36 [==============================] - 1s 22ms/step - loss: 0.1903 - accuracy: 0.9305\n",
            "Epoch 19/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1798 - accuracy: 0.9336\n",
            "Epoch 20/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1826 - accuracy: 0.9398\n",
            "Epoch 21/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1660 - accuracy: 0.9477\n",
            "Epoch 22/75\n",
            "36/36 [==============================] - 1s 19ms/step - loss: 0.1592 - accuracy: 0.9522\n",
            "Epoch 23/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1588 - accuracy: 0.9539\n",
            "Epoch 24/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1546 - accuracy: 0.9601\n",
            "Epoch 25/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1491 - accuracy: 0.9624\n",
            "Epoch 26/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1435 - accuracy: 0.9686\n",
            "Epoch 27/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1386 - accuracy: 0.9770\n",
            "Epoch 28/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.1269 - accuracy: 0.9810\n",
            "Epoch 29/75\n",
            "36/36 [==============================] - 1s 34ms/step - loss: 0.1222 - accuracy: 0.9845\n",
            "Epoch 30/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.1176 - accuracy: 0.9858\n",
            "Epoch 31/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.1129 - accuracy: 0.9867\n",
            "Epoch 32/75\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.1060 - accuracy: 0.9894\n",
            "Epoch 33/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.1009 - accuracy: 0.9929\n",
            "Epoch 34/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0978 - accuracy: 0.9934\n",
            "Epoch 35/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0934 - accuracy: 0.9934\n",
            "Epoch 36/75\n",
            "36/36 [==============================] - 1s 19ms/step - loss: 0.0894 - accuracy: 0.9951\n",
            "Epoch 37/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0855 - accuracy: 0.9956\n",
            "Epoch 38/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0835 - accuracy: 0.9965\n",
            "Epoch 39/75\n",
            "36/36 [==============================] - 1s 19ms/step - loss: 0.0798 - accuracy: 0.9965\n",
            "Epoch 40/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0767 - accuracy: 0.9969\n",
            "Epoch 41/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0735 - accuracy: 0.9978\n",
            "Epoch 42/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0719 - accuracy: 0.9973\n",
            "Epoch 43/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0694 - accuracy: 0.9978\n",
            "Epoch 44/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0678 - accuracy: 0.9987\n",
            "Epoch 45/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0649 - accuracy: 0.9982\n",
            "Epoch 46/75\n",
            "36/36 [==============================] - 1s 22ms/step - loss: 0.0628 - accuracy: 0.9987\n",
            "Epoch 47/75\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0605 - accuracy: 0.9987\n",
            "Epoch 48/75\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0587 - accuracy: 0.9987\n",
            "Epoch 49/75\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0568 - accuracy: 0.9987\n",
            "Epoch 50/75\n",
            "36/36 [==============================] - 1s 33ms/step - loss: 0.0553 - accuracy: 0.9987\n",
            "Epoch 51/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.0537 - accuracy: 0.9987\n",
            "Epoch 52/75\n",
            "36/36 [==============================] - 1s 22ms/step - loss: 0.0521 - accuracy: 0.9991\n",
            "Epoch 53/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0508 - accuracy: 0.9991\n",
            "Epoch 54/75\n",
            "36/36 [==============================] - 1s 21ms/step - loss: 0.0498 - accuracy: 0.9991\n",
            "Epoch 55/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0489 - accuracy: 0.9991\n",
            "Epoch 56/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0472 - accuracy: 0.9991\n",
            "Epoch 57/75\n",
            "36/36 [==============================] - 1s 19ms/step - loss: 0.0461 - accuracy: 0.9991\n",
            "Epoch 58/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0450 - accuracy: 0.9991\n",
            "Epoch 59/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0438 - accuracy: 0.9996\n",
            "Epoch 60/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0426 - accuracy: 0.9996\n",
            "Epoch 61/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0415 - accuracy: 0.9996\n",
            "Epoch 62/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0408 - accuracy: 0.9996\n",
            "Epoch 63/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0398 - accuracy: 0.9996\n",
            "Epoch 64/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0388 - accuracy: 0.9996\n",
            "Epoch 65/75\n",
            "36/36 [==============================] - 1s 21ms/step - loss: 0.0380 - accuracy: 0.9996\n",
            "Epoch 66/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.0371 - accuracy: 0.9996\n",
            "Epoch 67/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.0363 - accuracy: 0.9996\n",
            "Epoch 68/75\n",
            "36/36 [==============================] - 1s 31ms/step - loss: 0.0355 - accuracy: 0.9996\n",
            "Epoch 69/75\n",
            "36/36 [==============================] - 1s 33ms/step - loss: 0.0348 - accuracy: 0.9996\n",
            "Epoch 70/75\n",
            "36/36 [==============================] - 1s 32ms/step - loss: 0.0341 - accuracy: 0.9996\n",
            "Epoch 71/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0333 - accuracy: 0.9996\n",
            "Epoch 72/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0326 - accuracy: 0.9996\n",
            "Epoch 73/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0323 - accuracy: 0.9996\n",
            "Epoch 74/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0316 - accuracy: 0.9996\n",
            "Epoch 75/75\n",
            "36/36 [==============================] - 1s 20ms/step - loss: 0.0308 - accuracy: 0.9996\n",
            "Epoch 1/75\n",
            "36/36 [==============================] - 3s 36ms/step - loss: 0.5269 - accuracy: 0.7923\n",
            "Epoch 2/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.4800 - accuracy: 0.8127\n",
            "Epoch 3/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.4427 - accuracy: 0.8127\n",
            "Epoch 4/75\n",
            "36/36 [==============================] - 1s 40ms/step - loss: 0.3705 - accuracy: 0.8127\n",
            "Epoch 5/75\n",
            "36/36 [==============================] - 2s 61ms/step - loss: 0.3182 - accuracy: 0.8543\n",
            "Epoch 6/75\n",
            "36/36 [==============================] - 2s 60ms/step - loss: 0.2705 - accuracy: 0.8822\n",
            "Epoch 7/75\n",
            "36/36 [==============================] - 2s 54ms/step - loss: 0.2285 - accuracy: 0.8955\n",
            "Epoch 8/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.1720 - accuracy: 0.9274\n",
            "Epoch 9/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.1416 - accuracy: 0.9402\n",
            "Epoch 10/75\n",
            "36/36 [==============================] - 1s 35ms/step - loss: 0.1049 - accuracy: 0.9628\n",
            "Epoch 11/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0839 - accuracy: 0.9708\n",
            "Epoch 12/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0719 - accuracy: 0.9783\n",
            "Epoch 13/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0638 - accuracy: 0.9779\n",
            "Epoch 14/75\n",
            "36/36 [==============================] - 1s 35ms/step - loss: 0.0857 - accuracy: 0.9699\n",
            "Epoch 15/75\n",
            "36/36 [==============================] - 2s 50ms/step - loss: 0.0382 - accuracy: 0.9907\n",
            "Epoch 16/75\n",
            "36/36 [==============================] - 2s 63ms/step - loss: 0.0343 - accuracy: 0.9907\n",
            "Epoch 17/75\n",
            "36/36 [==============================] - 2s 60ms/step - loss: 0.0224 - accuracy: 0.9960\n",
            "Epoch 18/75\n",
            "36/36 [==============================] - 1s 41ms/step - loss: 0.0175 - accuracy: 0.9982\n",
            "Epoch 19/75\n",
            "36/36 [==============================] - 1s 35ms/step - loss: 0.0119 - accuracy: 0.9991\n",
            "Epoch 20/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0089 - accuracy: 0.9991\n",
            "Epoch 21/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0092 - accuracy: 0.9996\n",
            "Epoch 22/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0084 - accuracy: 0.9991\n",
            "Epoch 23/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 0.0068 - accuracy: 0.9996\n",
            "Epoch 24/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0045 - accuracy: 0.9996\n",
            "Epoch 25/75\n",
            "36/36 [==============================] - 1s 40ms/step - loss: 0.0031 - accuracy: 0.9996\n",
            "Epoch 26/75\n",
            "36/36 [==============================] - 2s 61ms/step - loss: 0.0023 - accuracy: 1.0000\n",
            "Epoch 27/75\n",
            "36/36 [==============================] - 2s 63ms/step - loss: 0.0022 - accuracy: 1.0000\n",
            "Epoch 28/75\n",
            "36/36 [==============================] - 2s 52ms/step - loss: 0.0016 - accuracy: 1.0000\n",
            "Epoch 29/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0016 - accuracy: 1.0000\n",
            "Epoch 30/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 0.0012 - accuracy: 1.0000\n",
            "Epoch 31/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 0.0011 - accuracy: 1.0000\n",
            "Epoch 32/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 9.9267e-04 - accuracy: 1.0000\n",
            "Epoch 33/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 8.7344e-04 - accuracy: 1.0000\n",
            "Epoch 34/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 7.3810e-04 - accuracy: 1.0000\n",
            "Epoch 35/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 6.8086e-04 - accuracy: 1.0000\n",
            "Epoch 36/75\n",
            "36/36 [==============================] - 2s 55ms/step - loss: 6.3312e-04 - accuracy: 1.0000\n",
            "Epoch 37/75\n",
            "36/36 [==============================] - 2s 61ms/step - loss: 5.6987e-04 - accuracy: 1.0000\n",
            "Epoch 38/75\n",
            "36/36 [==============================] - 2s 61ms/step - loss: 5.2531e-04 - accuracy: 1.0000\n",
            "Epoch 39/75\n",
            "36/36 [==============================] - 1s 40ms/step - loss: 4.9967e-04 - accuracy: 1.0000\n",
            "Epoch 40/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 4.5550e-04 - accuracy: 1.0000\n",
            "Epoch 41/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 4.1448e-04 - accuracy: 1.0000\n",
            "Epoch 42/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 3.8633e-04 - accuracy: 1.0000\n",
            "Epoch 43/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 3.6439e-04 - accuracy: 1.0000\n",
            "Epoch 44/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 3.4783e-04 - accuracy: 1.0000\n",
            "Epoch 45/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 3.2336e-04 - accuracy: 1.0000\n",
            "Epoch 46/75\n",
            "36/36 [==============================] - 1s 40ms/step - loss: 2.9980e-04 - accuracy: 1.0000\n",
            "Epoch 47/75\n",
            "36/36 [==============================] - 2s 61ms/step - loss: 2.8934e-04 - accuracy: 1.0000\n",
            "Epoch 48/75\n",
            "36/36 [==============================] - 2s 61ms/step - loss: 2.6931e-04 - accuracy: 1.0000\n",
            "Epoch 49/75\n",
            "36/36 [==============================] - 2s 53ms/step - loss: 2.4894e-04 - accuracy: 1.0000\n",
            "Epoch 50/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 2.3568e-04 - accuracy: 1.0000\n",
            "Epoch 51/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 2.2409e-04 - accuracy: 1.0000\n",
            "Epoch 52/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 2.1270e-04 - accuracy: 1.0000\n",
            "Epoch 53/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 2.0448e-04 - accuracy: 1.0000\n",
            "Epoch 54/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.9013e-04 - accuracy: 1.0000\n",
            "Epoch 55/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.8140e-04 - accuracy: 1.0000\n",
            "Epoch 56/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.7718e-04 - accuracy: 1.0000\n",
            "Epoch 57/75\n",
            "36/36 [==============================] - 2s 54ms/step - loss: 1.6490e-04 - accuracy: 1.0000\n",
            "Epoch 58/75\n",
            "36/36 [==============================] - 2s 62ms/step - loss: 1.5662e-04 - accuracy: 1.0000\n",
            "Epoch 59/75\n",
            "36/36 [==============================] - 2s 60ms/step - loss: 1.4666e-04 - accuracy: 1.0000\n",
            "Epoch 60/75\n",
            "36/36 [==============================] - 1s 39ms/step - loss: 1.4078e-04 - accuracy: 1.0000\n",
            "Epoch 61/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.3203e-04 - accuracy: 1.0000\n",
            "Epoch 62/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.3002e-04 - accuracy: 1.0000\n",
            "Epoch 63/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.2384e-04 - accuracy: 1.0000\n",
            "Epoch 64/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 1.1679e-04 - accuracy: 1.0000\n",
            "Epoch 65/75\n",
            "36/36 [==============================] - 1s 36ms/step - loss: 1.1207e-04 - accuracy: 1.0000\n",
            "Epoch 66/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 1.0583e-04 - accuracy: 1.0000\n",
            "Epoch 67/75\n",
            "36/36 [==============================] - 1s 41ms/step - loss: 1.0136e-04 - accuracy: 1.0000\n",
            "Epoch 68/75\n",
            "36/36 [==============================] - 2s 63ms/step - loss: 9.7206e-05 - accuracy: 1.0000\n",
            "Epoch 69/75\n",
            "36/36 [==============================] - 2s 60ms/step - loss: 9.2159e-05 - accuracy: 1.0000\n",
            "Epoch 70/75\n",
            "36/36 [==============================] - 2s 54ms/step - loss: 8.8876e-05 - accuracy: 1.0000\n",
            "Epoch 71/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 8.5922e-05 - accuracy: 1.0000\n",
            "Epoch 72/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 8.4205e-05 - accuracy: 1.0000\n",
            "Epoch 73/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 7.9421e-05 - accuracy: 1.0000\n",
            "Epoch 74/75\n",
            "36/36 [==============================] - 1s 37ms/step - loss: 7.5673e-05 - accuracy: 1.0000\n",
            "Epoch 75/75\n",
            "36/36 [==============================] - 1s 38ms/step - loss: 7.1627e-05 - accuracy: 1.0000\n",
            "Epoch 1/75\n",
            "36/36 [==============================] - 5s 93ms/step - loss: 0.5429 - accuracy: 0.7905\n",
            "Epoch 2/75\n",
            "36/36 [==============================] - 4s 107ms/step - loss: 0.4882 - accuracy: 0.8127\n",
            "Epoch 3/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.4883 - accuracy: 0.8127\n",
            "Epoch 4/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.4878 - accuracy: 0.8127\n",
            "Epoch 5/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.4840 - accuracy: 0.8127\n",
            "Epoch 6/75\n",
            "36/36 [==============================] - 3s 74ms/step - loss: 0.4779 - accuracy: 0.8127\n",
            "Epoch 7/75\n",
            "36/36 [==============================] - 4s 108ms/step - loss: 0.4729 - accuracy: 0.8127\n",
            "Epoch 8/75\n",
            "36/36 [==============================] - 3s 86ms/step - loss: 0.4199 - accuracy: 0.8215\n",
            "Epoch 9/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.3842 - accuracy: 0.8423\n",
            "Epoch 10/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.3370 - accuracy: 0.8676\n",
            "Epoch 11/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.3269 - accuracy: 0.8685\n",
            "Epoch 12/75\n",
            "36/36 [==============================] - 3s 95ms/step - loss: 0.3012 - accuracy: 0.8857\n",
            "Epoch 13/75\n",
            "36/36 [==============================] - 4s 103ms/step - loss: 0.2881 - accuracy: 0.8849\n",
            "Epoch 14/75\n",
            "36/36 [==============================] - 3s 70ms/step - loss: 0.2992 - accuracy: 0.8831\n",
            "Epoch 15/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.2511 - accuracy: 0.9128\n",
            "Epoch 16/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.2599 - accuracy: 0.9021\n",
            "Epoch 17/75\n",
            "36/36 [==============================] - 3s 80ms/step - loss: 0.2088 - accuracy: 0.9198\n",
            "Epoch 18/75\n",
            "36/36 [==============================] - 4s 108ms/step - loss: 0.1647 - accuracy: 0.9345\n",
            "Epoch 19/75\n",
            "36/36 [==============================] - 3s 80ms/step - loss: 0.1691 - accuracy: 0.9322\n",
            "Epoch 20/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.1331 - accuracy: 0.9473\n",
            "Epoch 21/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.1158 - accuracy: 0.9553\n",
            "Epoch 22/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0910 - accuracy: 0.9646\n",
            "Epoch 23/75\n",
            "36/36 [==============================] - 4s 104ms/step - loss: 0.0763 - accuracy: 0.9739\n",
            "Epoch 24/75\n",
            "36/36 [==============================] - 3s 94ms/step - loss: 0.1267 - accuracy: 0.9469\n",
            "Epoch 25/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0960 - accuracy: 0.9628\n",
            "Epoch 26/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0874 - accuracy: 0.9650\n",
            "Epoch 27/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0595 - accuracy: 0.9756\n",
            "Epoch 28/75\n",
            "36/36 [==============================] - 3s 87ms/step - loss: 0.0688 - accuracy: 0.9752\n",
            "Epoch 29/75\n",
            "36/36 [==============================] - 4s 108ms/step - loss: 0.0439 - accuracy: 0.9836\n",
            "Epoch 30/75\n",
            "36/36 [==============================] - 3s 74ms/step - loss: 0.0557 - accuracy: 0.9836\n",
            "Epoch 31/75\n",
            "36/36 [==============================] - 3s 70ms/step - loss: 0.0448 - accuracy: 0.9841\n",
            "Epoch 32/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.1537 - accuracy: 0.9446\n",
            "Epoch 33/75\n",
            "36/36 [==============================] - 3s 69ms/step - loss: 0.0698 - accuracy: 0.9739\n",
            "Epoch 34/75\n",
            "36/36 [==============================] - 4s 107ms/step - loss: 0.0454 - accuracy: 0.9810\n",
            "Epoch 35/75\n",
            "36/36 [==============================] - 3s 87ms/step - loss: 0.0306 - accuracy: 0.9885\n",
            "Epoch 36/75\n",
            "36/36 [==============================] - 2s 69ms/step - loss: 0.0232 - accuracy: 0.9903\n",
            "Epoch 37/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0455 - accuracy: 0.9858\n",
            "Epoch 38/75\n",
            "36/36 [==============================] - 3s 92ms/step - loss: 0.0404 - accuracy: 0.9863\n",
            "Epoch 39/75\n",
            "36/36 [==============================] - 4s 119ms/step - loss: 0.0507 - accuracy: 0.9823\n",
            "Epoch 40/75\n",
            "36/36 [==============================] - 4s 115ms/step - loss: 0.0254 - accuracy: 0.9903\n",
            "Epoch 41/75\n",
            "36/36 [==============================] - 3s 79ms/step - loss: 0.0195 - accuracy: 0.9938\n",
            "Epoch 42/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0319 - accuracy: 0.9872\n",
            "Epoch 43/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0212 - accuracy: 0.9929\n",
            "Epoch 44/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0460 - accuracy: 0.9823\n",
            "Epoch 45/75\n",
            "36/36 [==============================] - 4s 103ms/step - loss: 0.0175 - accuracy: 0.9947\n",
            "Epoch 46/75\n",
            "36/36 [==============================] - 3s 96ms/step - loss: 0.0095 - accuracy: 0.9978\n",
            "Epoch 47/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0150 - accuracy: 0.9956\n",
            "Epoch 48/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0274 - accuracy: 0.9903\n",
            "Epoch 49/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0381 - accuracy: 0.9863\n",
            "Epoch 50/75\n",
            "36/36 [==============================] - 3s 87ms/step - loss: 0.0165 - accuracy: 0.9956\n",
            "Epoch 51/75\n",
            "36/36 [==============================] - 4s 108ms/step - loss: 0.0221 - accuracy: 0.9907\n",
            "Epoch 52/75\n",
            "36/36 [==============================] - 3s 74ms/step - loss: 0.0123 - accuracy: 0.9956\n",
            "Epoch 53/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0095 - accuracy: 0.9960\n",
            "Epoch 54/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0138 - accuracy: 0.9960\n",
            "Epoch 55/75\n",
            "36/36 [==============================] - 3s 74ms/step - loss: 0.0429 - accuracy: 0.9836\n",
            "Epoch 56/75\n",
            "36/36 [==============================] - 4s 110ms/step - loss: 0.0400 - accuracy: 0.9858\n",
            "Epoch 57/75\n",
            "36/36 [==============================] - 3s 88ms/step - loss: 0.0090 - accuracy: 0.9965\n",
            "Epoch 58/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0034 - accuracy: 0.9991\n",
            "Epoch 59/75\n",
            "36/36 [==============================] - 3s 73ms/step - loss: 0.0016 - accuracy: 0.9996\n",
            "Epoch 60/75\n",
            "36/36 [==============================] - 3s 70ms/step - loss: 0.0182 - accuracy: 0.9951\n",
            "Epoch 61/75\n",
            "36/36 [==============================] - 4s 102ms/step - loss: 0.0163 - accuracy: 0.9942\n",
            "Epoch 62/75\n",
            "36/36 [==============================] - 4s 99ms/step - loss: 0.0112 - accuracy: 0.9960\n",
            "Epoch 63/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0549 - accuracy: 0.9836\n",
            "Epoch 64/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 0.0178 - accuracy: 0.9942\n",
            "Epoch 65/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 0.0087 - accuracy: 0.9978\n",
            "Epoch 66/75\n",
            "36/36 [==============================] - 3s 83ms/step - loss: 0.0091 - accuracy: 0.9978\n",
            "Epoch 67/75\n",
            "36/36 [==============================] - 4s 106ms/step - loss: 0.0013 - accuracy: 1.0000\n",
            "Epoch 68/75\n",
            "36/36 [==============================] - 3s 78ms/step - loss: 4.7175e-04 - accuracy: 1.0000\n",
            "Epoch 69/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 3.0570e-04 - accuracy: 1.0000\n",
            "Epoch 70/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 2.2111e-04 - accuracy: 1.0000\n",
            "Epoch 71/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 1.7868e-04 - accuracy: 1.0000\n",
            "Epoch 72/75\n",
            "36/36 [==============================] - 4s 104ms/step - loss: 1.4313e-04 - accuracy: 1.0000\n",
            "Epoch 73/75\n",
            "36/36 [==============================] - 3s 96ms/step - loss: 1.1978e-04 - accuracy: 1.0000\n",
            "Epoch 74/75\n",
            "36/36 [==============================] - 3s 72ms/step - loss: 9.8515e-05 - accuracy: 1.0000\n",
            "Epoch 75/75\n",
            "36/36 [==============================] - 3s 71ms/step - loss: 8.3623e-05 - accuracy: 1.0000\n",
            "31/31 [==============================] - 0s 5ms/step\n",
            "31/31 [==============================] - 0s 7ms/step\n",
            "31/31 [==============================] - 1s 15ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x350 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [2.7, 2.7]\n",
        "#plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "# ax = plt.GridSpec(1, 1)\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "# ax1 = plt.subplot(ax[0,0])\n",
        "# # plt.title('A', weight='bold',  fontsize=18, y = 0.95, x=-0.14)\n",
        "plt.xticks(weight='bold')\n",
        "plt.yticks(weight='bold')\n",
        "\n",
        "mlp.fit(xtrain, ytrain)\n",
        "ann_cv.fit(X_train, y_train, batch_size= 64)\n",
        "cnn_cv.fit(X_train, y_train, batch_size= 64)\n",
        "cl_cv.fit(X_train, y_train, batch_size= 64)\n",
        "\n",
        "pred = mlp.predict_proba(xtest)[:, 1]\n",
        "fpr, tpr, _ = metrics.roc_curve(ytest, pred)\n",
        "auc = round(metrics.roc_auc_score(ytest, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#800000\", label=\"MLP, AUC=\"+str(auc))\n",
        "\n",
        "pred = ann_cv.predict(X_val).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(y_val, pred)\n",
        "auc = round(metrics.roc_auc_score(y_val, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#FFA500\", label=\"ANN, AUC=\"+str(auc))\n",
        "\n",
        "pred = cl_cv.predict(X_val).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(y_val, pred)\n",
        "auc = round(metrics.roc_auc_score(y_val, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#8A2BE2\", label=\"CLSTM, AUC=\"+str(auc))\n",
        "\n",
        "pred = cnn_cv.predict(X_val).ravel()\n",
        "fpr, tpr, _ = metrics.roc_curve(y_val, pred)\n",
        "auc = round(metrics.roc_auc_score(y_val, pred), 3)\n",
        "plt.plot(fpr,tpr, color=\"#00008B\", label=\"CNN, AUC=\"+str(auc))\n",
        "\n",
        "\n",
        "plt.xlabel('False Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.ylabel('True Positive Rate', fontweight = 'bold',  fontsize=9)\n",
        "plt.legend(loc = 'lower right', fontsize=6)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('ROC Curve.png', dpi=800)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "id": "xIa9nSKjfPoS",
        "outputId": "22f5ab6b-3a74-488a-ae6f-341e6d8b1ee2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "66/66 [==============================] - 5s 79ms/step - loss: 0.1689 - accuracy: 0.9379\n",
            "66/66 [==============================] - 13s 199ms/step - loss: 0.0521 - accuracy: 0.9851\n",
            "66/66 [==============================] - 14s 211ms/step - loss: 0.4983 - accuracy: 0.7762\n",
            "33/33 [==============================] - 0s 11ms/step\n",
            "33/33 [==============================] - 1s 29ms/step\n",
            "33/33 [==============================] - 1s 20ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 270x270 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Performance Comparison**"
      ],
      "metadata": {
        "id": "_VoJQrEAM-MB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "result = pd.read_csv('/content/Result.csv')"
      ],
      "metadata": {
        "id": "JxG2HorFNDT0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "colors = ['#7FBCFF', '#FF8207', '#18A218', '#D02D80']"
      ],
      "metadata": {
        "id": "3YrCOMGBQjq8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [9.2, 8]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax = plt.GridSpec(2, 2)\n",
        "ax.update(wspace=0.46, hspace=0.17)\n",
        "\n",
        "\n",
        "values_group = result['CV_Accuracy']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#AACC00', '#C77DFF', '#FF758F', '#A2D2FF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('A', x=-0.362, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Accuracy', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['TS_Accuracy']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#AACC00', '#C77DFF', '#FF758F', '#A2D2FF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('B',  x=-0.365, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Accuracy', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['CV_MCC']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#AACC00', '#C77DFF', '#FF758F', '#A2D2FF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[1,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('C',  x=-0.362, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('MCC', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4, title='Feature Extractor', ncol=2, bbox_to_anchor=(1.6,-0.04), frameon=False);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['TS_MCC']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#AACC00', '#C77DFF', '#FF758F', '#A2D2FF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[1,1])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('D', x=-0.365, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('MCC', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "# Show chart\n",
        "plt.tight_layout()\n",
        "plt.savefig('Performance Comparison(ACC+MCC).png', dpi=800)\n",
        "plt.savefig('Performance Comparison(ACC+MCC).pdf', dpi=800)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hVINH5EsNHTi",
        "outputId": "091447c3-6b6a-4fa7-aeee-e55e52a6e854"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-00464d35f23a>:247: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-15-00464d35f23a>:248: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison(ACC+MCC).png', dpi=800)\n",
            "<ipython-input-15-00464d35f23a>:249: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison(ACC+MCC).pdf', dpi=800)\n",
            "<ipython-input-15-00464d35f23a>:249: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison(ACC+MCC).pdf', dpi=800)\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 920x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [9.2, 8]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax = plt.GridSpec(2, 2)\n",
        "ax.update(wspace=0.46, hspace=0.17)\n",
        "\n",
        "\n",
        "values_group = result['CV_Specificity']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#80B918', '#FFE66D', '#F07167', '#C77DFF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('A', x=-0.362, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Specificity', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['TS_Specificity']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#80B918', '#FFE66D', '#F07167', '#C77DFF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,1])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('B',  x=-0.365, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Specificity', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['CV_Sensitivity']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#80B918', '#FFE66D', '#F07167', '#C77DFF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[1,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('C',  x=-0.362, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Sensitivity', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4, title='Feature Extractor', ncol=2, bbox_to_anchor=(1.6,-0.04), frameon=False);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "values_group = result['TS_Sensitivity']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['LSA', 'NMBroto', 'APAAC', 'Geary']\n",
        "colors = ['#80B918', '#FFE66D', '#F07167', '#C77DFF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 4] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[1,1])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.6\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "plt.title('D', x=-0.365, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Sensitivity', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "\n",
        "# ax.legend(handles,handlelength=1.4, handleheight=1.4, legend_labels, loc='lower right')\n",
        "# legend = ax1.legend(handles=handles, handlelength=1.4, handleheight=1.4);\n",
        "plt.subplots_adjust(top=0.99)\n",
        "\n",
        "\n",
        "\n",
        "# Show chart\n",
        "plt.tight_layout()\n",
        "plt.savefig('Performance Comparison(Spc+Sen).png', dpi=800)\n",
        "plt.savefig('Performance Comparison(Spc+Sen).pdf', dpi=800)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fpTxsMjGWRBp",
        "outputId": "eeba8a27-5fef-4590-b3a1-12f64f1e80de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-3487b2ddf132>:247: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n",
            "<ipython-input-16-3487b2ddf132>:248: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison(Spc+Sen).png', dpi=800)\n",
            "<ipython-input-16-3487b2ddf132>:249: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison(Spc+Sen).pdf', dpi=800)\n",
            "<ipython-input-16-3487b2ddf132>:249: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.savefig('Performance Comparison(Spc+Sen).pdf', dpi=800)\n",
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 920x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = [2.7, 2.7]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "plt.rcParams.update({'font.family':'serif'})\n",
        "\n",
        "ax = plt.GridSpec(1, 1)\n",
        "# ax.update(wspace=0.46, hspace=0.17)\n",
        "\n",
        "values_group = result['TS_Accuracy']\n",
        "\n",
        "\n",
        "\n",
        "bar_names = result['Classifier']\n",
        "\n",
        "categories = ['FastText', 'Word2Vec', 'Doc2Vec', 'LSA']\n",
        "colors = colors = ['#80B918', '#FFE66D', '#F07167', '#C77DFF']\n",
        "\n",
        "# Sort values and categories in ascending order\n",
        "sorted_indices = np.argsort(values_group)\n",
        "sorted_values = [values_group[i] for i in sorted_indices]\n",
        "sorted_categories = [categories[i // 5] for i in sorted_indices]\n",
        "sorted_colors = [colors[i // 5] for i in sorted_indices]\n",
        "sorted_bar_names = [bar_names[i] for i in sorted_indices]\n",
        "\n",
        "# Create figure and axis\n",
        "\n",
        "\n",
        "# fig, ax = plt.subplots(figsize=(5,6))\n",
        "ax1 = plt.subplot(ax[0,0])\n",
        "# Set the width of the bars\n",
        "bar_width = 0.8\n",
        "\n",
        "\n",
        "# Create horizontal bars for the group\n",
        "bars_group = plt.barh(np.arange(len(sorted_values)), sorted_values, bar_width, color=sorted_colors, edgecolor='black')\n",
        "\n",
        "# Customize chart\n",
        "#plt.title('A', x=-0.35, y=0.93, fontsize=18, weight='bold')\n",
        "plt.xlabel('Score', weight='bold')\n",
        "# plt.ylabel('Custom Categories')\n",
        "ax1.set_yticks(np.arange(len(sorted_values)))\n",
        "ax1.set_yticklabels(sorted_bar_names, fontsize=7, weight='bold')\n",
        "\n",
        "plt.margins(x=0,y=0)\n",
        "\n",
        "# Add legend\n",
        "# rect1 = mlines.Line2D([], [], marker=\"s\", markersize=30, linewidth=0, color=\"r\")\n",
        "legend_labels = ['Category {}'.format(i+1) for i in range(len(categories))]\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "\n",
        "# legend_handles = [plt.Rectangle((0, 0), 0.5, 0.5, color=colors[i]) for i in range(len(categories))]\n",
        "from matplotlib.patches import Patch\n",
        "\n",
        "handles = [\n",
        "    Patch(facecolor=color, edgecolor=\"black\", label=label, alpha=0.7)\n",
        "    for label, color in zip(categories, colors)\n",
        "]\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('Performance Comparison.png', dpi=1200)\n",
        "# plt.savefig('Performance Comparison.pdf', dpi=800)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        },
        "id": "O35r2OxJdaNL",
        "outputId": "f3aaee27-ba53-4f20-8a8c-e64d59c10418"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 270x270 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
